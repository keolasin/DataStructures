1. A stack deals with newly arriving data first - whatever has most recently joined the data structure, is also the first to be dealt with. A queue is basically the opposite, where whatever joins the data structure is assigned an order, and then items are dealt with depending on what is next in line (or first arrived) before moving on to more recently added items. It's basically a to-do list, where order is important.

2. Both stacks and queues deal with one item at a time before addressing another, so there is some prioritization occurring, as well as a known method to handling that data.

3. I would think using a stack, or last-in first-out data structure would make the most sense for both UNDO and REDO functions - say we type a sentence ("I went to the store"). The *last* word in the sentence, 'store', when I UNDO, would then be removed, and we can place it in a temporary memory/array location. If we UNDO again, we again want the last item in the sentence, which is now 'the' - we then add it to the temporary array. From that temporary array, we now have ['store', 'the'] - if we redo, we want to redo in the same order that we had originally typed the sentence, or performed our undo actions - so we again want to address the last-item, first. So, we add 'the' to the fragment 'I went to' at its end, and then add 'store' if we issue another REDO command. If we were to use a queue for these functions, we would need to reverse the order of the queue- something we cannot do.
