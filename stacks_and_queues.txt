1. A stack deals with newly arriving data first - whatever has most recently joined the data structure, is also the first to be dealt with. A queue is basically the opposite, where whatever joins the data structure is assigned an order, and then items are dealt with depending on what is next in line (or first arrived) before moving on to more recently added items. It's basically a to-do list, where order is important.

2. Both stacks and queues deal with one item at a time before addressing another, so there is some prioritization occurring, as well as a known method to handling that data.

3. I would think using a stack, or last-in first-out data structure would make the most sense for both UNDO and REDO functions - say we type a sentence ("I went to the store"). The *last* word in the sentence, 'store', when I UNDO, would then be removed, and we can place it in a temporary memory/array location. If we UNDO again, we again want the last item in the sentence, which is now 'the' - we then add it to the temporary array. From that temporary array, we now have ['store', 'the'] - if we redo, we want to redo in the same order that we had originally typed the sentence, or performed our undo actions - so we again want to address the last-item, first. So, we add 'the' to the fragment 'I went to' at its end, and then add 'store' if we issue another REDO command. If we were to use a queue for these functions, we would need to reverse the order of the queue- something we cannot do.

Programming questions
1. To implement a stack, we can use an array as a temporary holder for our data (the stack). If we add data in order to the array, to reverse it, we can make use of the array method .pop, which will remove and return the last item in the array. Thus, we achieve our last-in (end of the array/stack), first-out (popping the last item in the stack) functionality.

```js
function reverser(text){
  let stack = [];
  // adding each character to the stack
  for (let index=0; index<text.length; index++){
    stack.push(text[index]);
  }
  
  let reversed = [];

  // remove a character from the start of the (index=0) stack, and add it to our new array
  while (stack.length > 0){
    let character = stack.pop();
    reversed.push(character);
  }
  
  // return the array as a string
  return reversed.join('');
}

console.log(reverser('hello!'));
console.log(reverser('rAcecar'));
console.log(reverser('two words'));
```

2. Since we're using a queue, where we deal with the first item in the data structure and items in the order in which they were added, to implement a .pop method (where we remove the last item, first), we should iterate through the queue starting from the end - we might use a modified FOR loop.
PSEUDOCODE
FUNCTION queueMirrorsPop INPUT text
  INIT queue
  FOR each character IN text
    ADD character TO queue
  END FOR
  INIT mirrored
  FOR each character IN queue WHERE index is EQUAL TO the length of queue
    ADD character TO mirror
    DECREMENT index
  END FOR if index EQUAL TO 0
END FUNCTION

```js
```
    
    
    
