1. A hash table is a data structure that maps key-value pairs to unique indices in an array, where the index of a certain key-value pair can be stored using a hash code that converts the unique key into a number, that is then simplified and associated with an index in the array.

2. Hashing refers to the conversion of a unique key from a key-value pair to a numeric identifier called a hash code, which can be further simplified for use in the hash table's internal array. By referencing the hash code, we would expect to find the value for that unique key-value pair from which the hash code was originated.

3. A hash table stores data in 'bins' located at unique indices of an array - we expect the data stored to be similarly formatted, such as an address book (name, address, phone number, etc.) for each bin, and each unique bin/index will reference a specific key-value pair, for example: the unique key "John Doe" would have address, phone number, email values associated with it in that bin.

4. Hash tables differ from objects in that objects are not necessarily sorted according to an index - we know where each key-value pair lives in a hash table due to being assigned a specific hash code for indexing in its array, while an object in some programming languages may not be referenced by such an index - only by key-value pairs. However, they are similar in that both should store similar information (name, address, phone number properties for unique persons in an address book).

5.
A list of pets and their unique names - hash table
The name, age, and birthday of your best friend - object
The name and location of every company in a given city - hash table
All of the books checked out from a library by a particular individual - hash table
The primary and secondary phone numbers for a contact - object

Programming Questions (revised)

```js
let hash = require('string-hash');

class Customer{
  constructor(name, phone, address){
    this.name = name;
    this.address = address;
    this.phone = phone;
  }
}

// customer hash table
class CustomerTable{
  constructor(){
    this.table = new Array(10);
  }

  // creating a hash code from the 'name' property and converting it to an index, to be assigned to the hash table array
  createHash(someData){
    let hashCode = hash(someData['phone']);
    let capacity = this.table.length;
    let tableIndex = hashCode % capacity;

    // console log hash code and table index
    console.log(`Our numeric hash code is: ${hashCode}`);
    console.log(`Which is converted to an index for the table, initially assigned to index of: ${tableIndex}`);

    return tableIndex;
  }

  addToTable(someData){
    // use a unique property of the object provided for hash code
    console.log(`\naddToTable called for ${someData['phone']}`);
    let index = this.createHash(someData);

    // check if index assigned is open/available for assignment
    if(!this.table[index]){
      console.log(`Empty index found in table, ${someData['name']} assigned index of: ${index}`);
      this.table[index] = someData;
    }
    // collision handling
    else { // if index was not open (already contains data), increment index until available index found
      while(this.table[index]){
        index++;
        console.log(`Collision found, index increased and is now: ${index}`);
        if(!this.table[index]){
          console.log(`Empty index found in table, ${someData['name']} assigned index of: ${index}`);
          this.table[index]=someData;
          break;
        }
      }
    }
  }

  //search function for hash table
  search(query){
    console.log(`\nSearch started for ${query}`);
    let index = this.createHash(query);

    // check if hashed index values match
    if(this.table[index]){
      if(this.table[index]['phone'] === query['phone']){
        console.log(`${query} found at index of ${index}, contains ${this.table[index]}`);
        return this.table[index];
      } else {
        while(this.table[index]['phone'] !== query['phone']){
          index++;
          if(this.table[index]['phone'] === query['phone']){
            console.log(`${query} found at index of ${index}, contains ${this.table[index]}`);
            return this.table[index];
          }
          if (index > this.table.length){
            console.log(`${query['phone']} not found`);
            return null;
          }
        }
      }
    }
    console.log (`${query} not found`);
    return null;
  }
}


// Customer tests (question 1)
let jess = new Customer('Jess', '333 333 3333', '456 street');

let testTable = new CustomerTable();

testTable.addToTable({name: 'Tim', phone: '111 111 1111', address: '123 street'});
testTable.addToTable(jess);

console.log(testTable.search({name: 'Tim', phone: '111 111 1111', address: '123 street'}));
console.log(testTable.search(jess));


// question 2
class Product {
  constructor(productID, name, quantity){
    this.productID = productID;
    this.name = name;
    this.quantity = quantity;
  }
}

class InventoryTable{
  constructor(){
    this.table = new Array(10);
  }

  // creating a hash code from the 'name' property and converting it to an index, to be assigned to the hash table array
  createHash(someData){
    let hashCode = hash(someData['productID']);
    let capacity = this.table.length;
    let tableIndex = hashCode % capacity;

    // console log hash code and table index
    console.log(`Our numeric hash code is: ${hashCode}`);
    console.log(`Which is converted to an index for the table, initially assigned to index of: ${tableIndex}`);

    return tableIndex;
  }

  addToTable(someData){
    // use a unique property of the object provided for hash code
    console.log(`\naddToTable called for ${someData['name']}`);
    let index = this.createHash(someData);

    // check if index assigned is open/available for assignment
    if(!this.table[index]){
      console.log(`Empty index found in table, ${someData['name']} assigned index of: ${index}`);
      this.table[index] = someData;
    }
    // collision handling
    else { // if index was not open (already contains data), increment index until available index found
      while(this.table[index]){
        index++;
        console.log(`Collision found, index increased and is now: ${index}`);
        if(!this.table[index]){
          console.log(`Empty index found in table, ${someData['name']} assigned index of: ${index} using productID (${someData['productID']})`);
          this.table[index]=someData;
          break;
        }
      }
    }
  }

  //search function for hash table
  search(query){
    console.log(`\nSearch started for ${query}`);
    let index = this.createHash(query);

    // check if hashed index values match
    if(this.table[index]){
      if(this.table[index]['productID'] === query['productID']){
        console.log(`${query} found at index of ${index}, contains ${this.table[index]}`);
        return this.table[index];
      } else {
        while(this.table[index]['productID'] !== query['productID']){
          index++;
          if(this.table[index]['name'] === query['name']){
            console.log(`${query} found at index of ${index}, contains ${this.table[index]}`);
            return this.table[index];
          }
          if (index > this.table.length){
            console.log(`${query['name']} not found`);
            return null;
          }
        }
      }
    }
    console.log (`${query} not found`);
    return null;
  }
}

// Inventory tests (question 2)
let banana = new Product('3287', 'Banana', 20); // uses PLU code
let tomato = new Product('3061', 'Tomato', 5);

let testInventory = new InventoryTable();

testInventory.addToTable(banana);
testInventory.addToTable(tomato);
console.log(testInventory.search( { productID: '3287', name: 'banana'} ));
console.log(testInventory.search( { productID: '3061', name: 'tomato'} ));


// Question 3
class NewsPiece {
  constructor(pubDate, publisher, article){
    this.pubDate = pubDate;
    this.publisher = publisher;
    this.article = article
  }
}

class PaperTable{
  constructor(){
    this.table = new Array(10);
  }

  // creating a hash code from the 'name' property and converting it to an index, to be assigned to the hash table array
  createHash(someData){
    let hashCode = hash(someData['publisher']+someData['date']);
    let capacity = this.table.length;
    let tableIndex = hashCode % capacity;

    // console log hash code and table index
    console.log(`Our numeric hash code is: ${hashCode}`);
    console.log(`Which is converted to an index for the table, initially assigned to index of: ${tableIndex}`);

    return tableIndex;
  }

  addToTable(someData){
    // use a unique property of the object provided for hash code
    console.log(`\naddToTable called for ${someData['publisher']}`);
    let index = this.createHash(someData);

    // check if index assigned is open/available for assignment
    if(!this.table[index]){
      console.log(`Empty index found in table, ${someData['name']} assigned index of: ${index}`);
      this.table[index] = someData;
    }
    // collision handling
    else { // if index was not open (already contains data), increment index until available index found
      while(this.table[index]){
        index++;
        console.log(`Collision found, index increased and is now: ${index}`);
        if(!this.table[index]){
          console.log(`Empty index found in table, ${someData['publisher']} assigned index of: ${index}.`);
          this.table[index]=someData;
          break;
        }
      }
    }
  }

  //search function for hash table
  search(query){
    console.log(`\nSearch started for ${query}`);
    let index = this.createHash(query);

    // check if hashed index values match
    if(this.table[index]){
      if(this.table[index]['date'] === query['date'] && this.table[index]['publisher'] === query['publisher']){
        console.log(`${query} found at index of ${index}, contains ${this.table[index]}`);
        return this.table[index];
      } else {
        while(this.table[index]['date'] !== query['date']){
          index++;
          if(this.table[index]['publisher'] === query['publisher']){
            console.log(`${query} found at index of ${index}, contains ${this.table[index]}`);
            return this.table[index];
          }
          if (index > this.table.length){
            console.log(`${query['publisher']} for date ${query['date']} not found`);
            return null;
          }
        }
      }
    }
    console.log (`${query} not found`);
    return null;
  }
}

// Newspaper tests (question 3)
let guardian = new NewsPiece('02/28/1950', 'The Guardian', 'some filler text');
let nyt = new NewsPiece('01/15/2019', 'New York Times', 'text of article lorem ipsum');

let testArchive = new PaperTable();

testArchive.addToTable(guardian);
testArchive.addToTable(nyt, 'publisher');

console.log(testArchive.search({ pubDate: '02/28/1950', publisher: 'The Guardian' }));
console.log(testArchive.search({ pubDate: '01/15/2019', publisher: 'New York Times' }));

```
